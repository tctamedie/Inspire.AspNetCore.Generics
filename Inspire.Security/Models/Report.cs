


using System.ComponentModel.DataAnnotations.Schema;

namespace Inspire.Security.Models
{
    public class ReportFormatConfiguration
    {
        public static List<ReportFormat> GetReportFormats()
        {
            return new List<ReportFormat>()
            {
                new ReportFormat {FormatCode="W",FormatDescription="Word",Order=1 },
                new ReportFormat {FormatCode="E",FormatDescription="Excel",Order=2 },
                new ReportFormat {FormatCode="P",FormatDescription="PDF",Order=3 },
                new ReportFormat {FormatCode="T",FormatDescription="Text",Order=4 },
            };
        }
        public static List<ReportFormat> GetReportFormats(string formatCode)
        {
            formatCode = formatCode ?? "WEPT";
            var data = GetReportFormats();
            var records = data.Where(s => formatCode.Contains(s.FormatCode)).ToList();
            return records;
        }

        public static string GetDescription(string formatCode)
        {
            formatCode = formatCode ?? "";
            var rights = GetReportFormats();
            var menuRight = rights.Where(r => formatCode.Contains(r.FormatCode)).ToList();
            return string.Join(", ", menuRight.OrderBy(s => s.Order).Select(s => s.FormatDescription)); ;
        }
        public static List<GenericData<string>> GetAllowableFormats(string formatCode)
        {
            formatCode = formatCode ?? "";
            var records = GetReportFormats();
            var allowedMenuRights = records.Where(s => formatCode.Contains(formatCode)).ToList();
            var result = Enumerable
                .Range(1, (1 << allowedMenuRights.Count) - 1)
                .Select(index => allowedMenuRights.Where((item, idx) => ((1 << idx) & index) != 0).ToList());
            List<GenericData<string>> data = new();
            foreach (var item in result)
            {
                string id = string.Join("", item.OrderBy(s => s.Order).Select(s => s.FormatCode));
                string name = string.Join(",", item.OrderBy(s => s.Order).Select(s => s.FormatDescription));
                data.Add(new GenericData<string>
                {
                    ID = id,
                    Name = name,
                });
            }
            return data;
        }
    }
    public class ReportFormat
    {
        public string FormatCode { get; set; }
        public string FormatDescription { get; set; }
        public int Order { get; set; }
    }
    public class Report : StandardMakerChecker<string>
    {
        public Report()
        {
        }
        public string SubMenuID { get; set; }
        public string ReportFileName { get; set; }
        public string ReportUIModel { get; set; }
        [ForeignKey("SubMenuID")]
        public SubMenu SubMenu { get; set; }
        public bool Active { get; set; }


    }
    public class ReportDto : StandardMakerCheckerDto<string>
    {

        public override string Name { get => base.Name; set => base.Name = value; }
        public override string Id { get; set; }
        public string SubMenuID { get; set; }

        public string ReportFileName { get; set; }
        public bool Active { get; set; }
        public string ReportUIModel { get; set; }
    }
    public class ReportParameter
    {
        public string ID { get; set; }
        public int Order { get; set; }
        public string Label { get; set; }
        public int Grids { get; set; }
        public string ReportID { get; set; }
        public string InputFieldID { get; set; }
        public Report Report { get; set; }
        public InputField InputField { get; set; }
    }
    public class InputField
    {
        public string Label { get; set; }
        public string Type { get; set; }
        public string DataType { get; set; }
        public bool Autogenerated { get; set; }
        public bool Hidden { get; set; }
        public string ID { get; set; }
        public bool IsDate { get; set; }
        public bool IsDropDown { get; set; }
        public string Controller { get; set; }
        public string Action { get; set; }
        public string TextField { get; set; }
        public string SortField { get; set; }
        public string ValueField { get; set; }
        public string Area { get; set; }
        public bool MultpleSelect { get; set; }
        public string OnSelectedChange { get; set; }
        public string OnField { get; set; }
        public string DefaultValue { get; set; }
        public string AllowedValue { get; set; }
        public string FilterColumn { get; set; }
        public string FilterValue { get; set; }
        public string TabID { get; set; }
        public int? MinimumLength { get; set; }
        public int? MaximumLength { get; set; }
        public bool IsRequired { get; set; }


    }

}
